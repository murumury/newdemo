import React, { useState, useEffect } from 'react';
import { IPresence,IChannel, createPresence, JsonSerializable } from '@yomo/presence';
import Head from 'next/head';
import styles from '@/styles/Chat.module.css';

interface Message {
    id: string;
    message: string;
  }
export default  function Chat ( ){
    function isMessage(data: any): data is Message {
        return typeof data === 'object' && data !== null && 'id' in data && 'message' in data;
      }


    const [messages, setMessages] = useState<Array<{
        id: string,
        message: string,
        peerId?: string,
        peerMessage?: string
      }>>([]);    const [newMessage, setNewMessage] = useState('');
    const [connected, setConnected] = useState(false);
    const [presence, setPresence] = useState<any>();
    const [channel, setChannel] = useState<IChannel | null>(null);
    const [presenceClient, setPresenceClient] =
      useState<Promise<IPresence> | null>(null);

     
useEffect(() => {
    let isSubscribed = true; // 用于跟踪组件挂载状态
  
    // 创建实时通讯客户端
    createPresence('https://prscd2.allegro.earth/v1', {
      publicKey: 'EIHHOvhgKGPWPJfFpjKQMmKcshZtSpa6ezwp2dp',
      id: 'user-client-id',
      debug: true,
      
    }).then(async (presence) => {
      console.log('Presence: ', presence);
      setConnected(true);
      try {
        const newChannel = await presence.joinChannel('chat-channel', { id: 'user-client-id' });
        if (isSubscribed) {
          setChannel(newChannel);
  
          // 订阅消息
newChannel.subscribe('message', (data: JsonSerializable) => {
    // 使用类型守卫来检查 data 是否为 Message 类型
    if (isMessage(data)) {
        const payload: Message = data; 
      const peerState: Message = { id: 'some-id', message: 'some-message' }; // 这应该是您从其他地方获得的实际值
  
      setMessages(prevMsgs => [...prevMsgs, { ...payload, peerId: peerState.id }]);
    } else {
      // 如果 data 不是 Message 类型
      console.error('Data received is not a valid Message object:', data);
    }
  });
        }
      } catch (error) {
        console.error('Failed to join channel:', error);
      }
    });
  
    // 组件卸载时的清理函数
    return () => {
      isSubscribed = false;
if (channel) {
  try {
    // 尝试退出频道
    channel.leave();
  } catch (error) {
    console.error(error);
  }
}
    };
  }, []);
  
const sendMessage = () => {
    if (channel && newMessage.trim() !== '') {
      const messageToSend: Message = {
        id: 'user-client-id',
        message: newMessage.trim(),
      };
      
      if (channel) {
        channel.broadcast('message', messageToSend as unknown as JsonSerializable);
        // 更新自己的页面
setMessages(prevMsgs => [...prevMsgs, messageToSend]);
setNewMessage('');      }
    }
  };


    return(
        <>
        <Head>
          <title>Presence demo</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className="flex justify-center items-center min-h-screen bg-cover" style={{backgroundImage: `url('./bg.svg')`}}>
          <div className="bg-white rounded-lg shadow p-6 m-4 w-full lg:w-3/4 max-w-lg">
            <div className="border-b-2 pb-2 mb-4">
              <div className="overflow-y-auto h-64">
                {messages.map((msg, index) => (
                  <p key={index} className="text-sm mb-2">
                    {msg.message}
                  </p>
                ))}
              </div>
            </div>
            <div className="flex items-center">
              <textarea
                className="w-full p-2 resize-none mr-4 border rounded focus:outline-none focus:ring-2 focus:ring-blue-300"
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                placeholder="Please enter message..."
                onKeyDown={(e) => e.key === 'Enter' && sendMessage()}
                required
              />
              <button 
                className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                onClick={sendMessage}
              >
                Send Message
              </button>
            </div>
          </div>
        </main>
      </>
    )
}